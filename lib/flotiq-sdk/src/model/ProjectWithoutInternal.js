/**
 * Flotiq User API
 * ## Getting started   This is your Flotiq User API that allows you to access your data through the Content API that you defined.   ### Access to data   There are several methods that you can use to access your data:  * Live API docs - available via <code>Try it out</code> button available next to each endpoint   * Copying example code on the right side of each endpoint  * By downloading the SDKs available in mulitple languages.  * By downloading the Postman collection and importing it into Postman.    Each of these methods is described in length in the [user documentation](https://flotiq.com/docs/).   ### Authorization   In order to make use of the provided documentation, example code, SDKs and so on - you will need to pull out your API key. We recommend that you start with the ReadOnly API Key which will allow you to make all the `GET` requests but will error-out when you try to modify content. Please remember to replace the key for `POST`, `PUT` and `DELETE` calls.   It's also possible to use scoped API keys - you can create those in the API keys section of the Flotiq user interface. This will allow you to create a key that only authorizes access to a specific content type (or a set of content types, if you choose so). Read more about how to use and create API keys in the [API keys documentation](https://flotiq.com/docs/API/).   ## Object access   Once you define a Content Type it will become available in your Content API as a set of endpoints that will allow you to work with objects:   * create  * list  * update  * delete  * batch create  * retrieve single object.  ### Hydration   When you build Content Types that have relation to others your objects will optionally support hydration of related entities. The endpoints that support object retrieval accept a `hydrate` parameter, which can be used to easily fetch hydrated objects. Since this breaks the standard REST concepts - it's not enabled by default, but it's a very handy feature that allows to reduce the amount of HTTP requests sent over the wire and we strongly recommend to use it.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: hello@flotiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AbstractContentTypeSchemaDefinitionWithoutInternal from './AbstractContentTypeSchemaDefinitionWithoutInternal';
import DataSource from './DataSource';
import ProjectWithoutInternalAllOf from './ProjectWithoutInternalAllOf';

/**
 * The ProjectWithoutInternal model module.
 * @module model/ProjectWithoutInternal
 * @version 2.0.1
 */
class ProjectWithoutInternal {
    /**
     * Constructs a new <code>ProjectWithoutInternal</code>.
     * @alias module:model/ProjectWithoutInternal
     * @implements module:model/AbstractContentTypeSchemaDefinitionWithoutInternal
     * @implements module:model/ProjectWithoutInternalAllOf
     * @param id {String} Unique ID of the object
     * @param name {String} 
     * @param slug {String} Slug can only have alphanumerical characters, - and _
     */
    constructor(id, name, slug) { 
        AbstractContentTypeSchemaDefinitionWithoutInternal.initialize(this, id);ProjectWithoutInternalAllOf.initialize(this);
        ProjectWithoutInternal.initialize(this, id, name, slug);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, name, slug) { 
        obj['id'] = id;
        obj['name'] = name;
        obj['slug'] = slug;
    }

    /**
     * Constructs a <code>ProjectWithoutInternal</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProjectWithoutInternal} obj Optional instance to populate.
     * @return {module:model/ProjectWithoutInternal} The populated <code>ProjectWithoutInternal</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProjectWithoutInternal();
            AbstractContentTypeSchemaDefinitionWithoutInternal.constructFromObject(data, obj);
            ProjectWithoutInternalAllOf.constructFromObject(data, obj);

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('slug')) {
                obj['slug'] = ApiClient.convertToType(data['slug'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('gallery')) {
                obj['gallery'] = ApiClient.convertToType(data['gallery'], [DataSource]);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Unique ID of the object
 * @member {String} id
 */
ProjectWithoutInternal.prototype['id'] = undefined;

/**
 * @member {String} name
 */
ProjectWithoutInternal.prototype['name'] = undefined;

/**
 * Slug can only have alphanumerical characters, - and _
 * @member {String} slug
 */
ProjectWithoutInternal.prototype['slug'] = undefined;

/**
 * @member {String} status
 * @default 'draft'
 */
ProjectWithoutInternal.prototype['status'] = 'draft';

/**
 * @member {Array.<module:model/DataSource>} gallery
 */
ProjectWithoutInternal.prototype['gallery'] = undefined;

/**
 * @member {String} description
 */
ProjectWithoutInternal.prototype['description'] = undefined;


// Implement AbstractContentTypeSchemaDefinitionWithoutInternal interface:
/**
 * Unique ID of the object
 * @member {String} id
 */
AbstractContentTypeSchemaDefinitionWithoutInternal.prototype['id'] = undefined;
// Implement ProjectWithoutInternalAllOf interface:
/**
 * @member {String} name
 */
ProjectWithoutInternalAllOf.prototype['name'] = undefined;
/**
 * Slug can only have alphanumerical characters, - and _
 * @member {String} slug
 */
ProjectWithoutInternalAllOf.prototype['slug'] = undefined;
/**
 * @member {String} status
 * @default 'draft'
 */
ProjectWithoutInternalAllOf.prototype['status'] = 'draft';
/**
 * @member {Array.<module:model/DataSource>} gallery
 */
ProjectWithoutInternalAllOf.prototype['gallery'] = undefined;
/**
 * @member {String} description
 */
ProjectWithoutInternalAllOf.prototype['description'] = undefined;




export default ProjectWithoutInternal;

