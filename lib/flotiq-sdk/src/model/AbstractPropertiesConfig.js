/**
 * Flotiq User API
 * ## Getting started   This is your Flotiq User API that allows you to access your data through the Content API that you defined.   ### Access to data   There are several methods that you can use to access your data:  * Live API docs - available via <code>Try it out</code> button available next to each endpoint   * Copying example code on the right side of each endpoint  * By downloading the SDKs available in mulitple languages.  * By downloading the Postman collection and importing it into Postman.    Each of these methods is described in length in the [user documentation](https://flotiq.com/docs/).   ### Authorization   In order to make use of the provided documentation, example code, SDKs and so on - you will need to pull out your API key. We recommend that you start with the ReadOnly API Key which will allow you to make all the `GET` requests but will error-out when you try to modify content. Please remember to replace the key for `POST`, `PUT` and `DELETE` calls.   It's also possible to use scoped API keys - you can create those in the API keys section of the Flotiq user interface. This will allow you to create a key that only authorizes access to a specific content type (or a set of content types, if you choose so). Read more about how to use and create API keys in the [API keys documentation](https://flotiq.com/docs/API/).   ## Object access   Once you define a Content Type it will become available in your Content API as a set of endpoints that will allow you to work with objects:   * create  * list  * update  * delete  * batch create  * retrieve single object.  ### Hydration   When you build Content Types that have relation to others your objects will optionally support hydration of related entities. The endpoints that support object retrieval accept a `hydrate` parameter, which can be used to easily fetch hydrated objects. Since this breaks the standard REST concepts - it's not enabled by default, but it's a very handy feature that allows to reduce the amount of HTTP requests sent over the wire and we strongly recommend to use it.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: hello@flotiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AbstractContentTypeMetaDefinition from './AbstractContentTypeMetaDefinition';
import AbstractPropertiesConfigValidation from './AbstractPropertiesConfigValidation';

/**
 * The AbstractPropertiesConfig model module.
 * @module model/AbstractPropertiesConfig
 * @version 2.0.1
 */
class AbstractPropertiesConfig {
    /**
     * Constructs a new <code>AbstractPropertiesConfig</code>.
     * @alias module:model/AbstractPropertiesConfig
     * @param label {String} 
     * @param inputType {module:model/AbstractPropertiesConfig.InputTypeEnum} 
     * @param unique {Boolean} 
     */
    constructor(label, inputType, unique) { 
        
        AbstractPropertiesConfig.initialize(this, label, inputType, unique);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, label, inputType, unique) { 
        obj['label'] = label;
        obj['inputType'] = inputType;
        obj['unique'] = unique;
    }

    /**
     * Constructs a <code>AbstractPropertiesConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AbstractPropertiesConfig} obj Optional instance to populate.
     * @return {module:model/AbstractPropertiesConfig} The populated <code>AbstractPropertiesConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AbstractPropertiesConfig();

            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('inputType')) {
                obj['inputType'] = ApiClient.convertToType(data['inputType'], 'String');
            }
            if (data.hasOwnProperty('unique')) {
                obj['unique'] = ApiClient.convertToType(data['unique'], 'Boolean');
            }
            if (data.hasOwnProperty('readonly')) {
                obj['readonly'] = ApiClient.convertToType(data['readonly'], 'Boolean');
            }
            if (data.hasOwnProperty('hidden')) {
                obj['hidden'] = ApiClient.convertToType(data['hidden'], 'Boolean');
            }
            if (data.hasOwnProperty('validation')) {
                obj['validation'] = AbstractPropertiesConfigValidation.constructFromObject(data['validation']);
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = ApiClient.convertToType(data['options'], ['String']);
            }
            if (data.hasOwnProperty('helpText')) {
                obj['helpText'] = ApiClient.convertToType(data['helpText'], 'String');
            }
            if (data.hasOwnProperty('isTitlePart')) {
                obj['isTitlePart'] = ApiClient.convertToType(data['isTitlePart'], 'Boolean');
            }
            if (data.hasOwnProperty('showTime')) {
                obj['showTime'] = ApiClient.convertToType(data['showTime'], 'Boolean');
            }
            if (data.hasOwnProperty('blockEditorTypes')) {
                obj['blockEditorTypes'] = ApiClient.convertToType(data['blockEditorTypes'], ['String']);
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = AbstractContentTypeMetaDefinition.constructFromObject(data['items']);
            }
        }
        return obj;
    }


}

/**
 * @member {String} label
 */
AbstractPropertiesConfig.prototype['label'] = undefined;

/**
 * @member {module:model/AbstractPropertiesConfig.InputTypeEnum} inputType
 */
AbstractPropertiesConfig.prototype['inputType'] = undefined;

/**
 * @member {Boolean} unique
 */
AbstractPropertiesConfig.prototype['unique'] = undefined;

/**
 * @member {Boolean} readonly
 */
AbstractPropertiesConfig.prototype['readonly'] = undefined;

/**
 * @member {Boolean} hidden
 */
AbstractPropertiesConfig.prototype['hidden'] = undefined;

/**
 * @member {module:model/AbstractPropertiesConfigValidation} validation
 */
AbstractPropertiesConfig.prototype['validation'] = undefined;

/**
 * @member {Array.<String>} options
 */
AbstractPropertiesConfig.prototype['options'] = undefined;

/**
 * @member {String} helpText
 */
AbstractPropertiesConfig.prototype['helpText'] = undefined;

/**
 * @member {Boolean} isTitlePart
 */
AbstractPropertiesConfig.prototype['isTitlePart'] = undefined;

/**
 * @member {Boolean} showTime
 */
AbstractPropertiesConfig.prototype['showTime'] = undefined;

/**
 * @member {Array.<String>} blockEditorTypes
 */
AbstractPropertiesConfig.prototype['blockEditorTypes'] = undefined;

/**
 * @member {module:model/AbstractContentTypeMetaDefinition} items
 */
AbstractPropertiesConfig.prototype['items'] = undefined;





/**
 * Allowed values for the <code>inputType</code> property.
 * @enum {String}
 * @readonly
 */
AbstractPropertiesConfig['InputTypeEnum'] = {

    /**
     * value: "text"
     * @const
     */
    "text": "text",

    /**
     * value: "textarea"
     * @const
     */
    "textarea": "textarea",

    /**
     * value: "textMarkdown"
     * @const
     */
    "textMarkdown": "textMarkdown",

    /**
     * value: "richtext"
     * @const
     */
    "richtext": "richtext",

    /**
     * value: "email"
     * @const
     */
    "email": "email",

    /**
     * value: "radio"
     * @const
     */
    "radio": "radio",

    /**
     * value: "select"
     * @const
     */
    "select": "select",

    /**
     * value: "dateTime"
     * @const
     */
    "dateTime": "dateTime",

    /**
     * value: "number"
     * @const
     */
    "number": "number",

    /**
     * value: "checkbox"
     * @const
     */
    "checkbox": "checkbox",

    /**
     * value: "datasource"
     * @const
     */
    "datasource": "datasource",

    /**
     * value: "object"
     * @const
     */
    "object": "object",

    /**
     * value: "geo"
     * @const
     */
    "geo": "geo",

    /**
     * value: "block"
     * @const
     */
    "block": "block"
};



export default AbstractPropertiesConfig;

