/**
 * Flotiq User API
 * ## Getting started   This is your Flotiq User API that allows you to access your data through the Content API that you defined.   ### Access to data   There are several methods that you can use to access your data:  * Live API docs - available via <code>Try it out</code> button available next to each endpoint   * Copying example code on the right side of each endpoint  * By downloading the SDKs available in mulitple languages.  * By downloading the Postman collection and importing it into Postman.    Each of these methods is described in length in the [user documentation](https://flotiq.com/docs/).   ### Authorization   In order to make use of the provided documentation, example code, SDKs and so on - you will need to pull out your API key. We recommend that you start with the ReadOnly API Key which will allow you to make all the `GET` requests but will error-out when you try to modify content. Please remember to replace the key for `POST`, `PUT` and `DELETE` calls.   It's also possible to use scoped API keys - you can create those in the API keys section of the Flotiq user interface. This will allow you to create a key that only authorizes access to a specific content type (or a set of content types, if you choose so). Read more about how to use and create API keys in the [API keys documentation](https://flotiq.com/docs/API/).   ## Object access   Once you define a Content Type it will become available in your Content API as a set of endpoints that will allow you to work with objects:   * create  * list  * update  * delete  * batch create  * retrieve single object.  ### Hydration   When you build Content Types that have relation to others your objects will optionally support hydration of related entities. The endpoints that support object retrieval accept a `hydrate` parameter, which can be used to easily fetch hydrated objects. Since this breaks the standard REST concepts - it's not enabled by default, but it's a very handy feature that allows to reduce the amount of HTTP requests sent over the wire and we strongly recommend to use it.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: hello@flotiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineResponse40012 from '../model/InlineResponse40012';
import MediaWithoutInternal from '../model/MediaWithoutInternal';
import Model401Response from '../model/Model401Response';
import Model404Response from '../model/Model404Response';

/**
* Media service.
* @module api/MediaApi
* @version 2.0.1
*/
export default class MediaApi {

    /**
    * Constructs a new MediaApi. 
    * @alias module:api/MediaApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get single media file
     * @param {String} widthHeight Expected format: WIDTHxHEIGHT, for example 750x200. Width of the image, or 0 when the file is not an image or it should have original uploaded width, or it should be scaled proportionally with height specified. Height of the image, or 0 when the file is not an image or it should have original uploaded height, or it should be scaled proportionally with width specified
     * @param {String} key Key of the file, it is made from id and extension, e.g. _media-4564.jpg for image with id _media-4564 and jpg extension
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    getMediaWithHttpInfo(widthHeight, key) {
      let postBody = null;
      // verify the required parameter 'widthHeight' is set
      if (widthHeight === undefined || widthHeight === null) {
        throw new Error("Missing the required parameter 'widthHeight' when calling getMedia");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getMedia");
      }

      let pathParams = {
        'width_height': widthHeight,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['image/jpeg', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/image/{width_height}/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get single media file
     * @param {String} widthHeight Expected format: WIDTHxHEIGHT, for example 750x200. Width of the image, or 0 when the file is not an image or it should have original uploaded width, or it should be scaled proportionally with height specified. Height of the image, or 0 when the file is not an image or it should have original uploaded height, or it should be scaled proportionally with width specified
     * @param {String} key Key of the file, it is made from id and extension, e.g. _media-4564.jpg for image with id _media-4564 and jpg extension
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link File}
     */
    getMedia(widthHeight, key) {
      return this.getMediaWithHttpInfo(widthHeight, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Endpoint for media files upload
     * @param {File} file File to upload
     * @param {module:model/String} type Type of file image|file
     * @param {Object} opts Optional parameters
     * @param {Number} opts.save Should file be saved to database on upload: 0|1 (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MediaWithoutInternal} and HTTP response
     */
    postMediaWithHttpInfo(file, type, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling postMedia");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling postMedia");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file,
        'type': type,
        'save': opts['save']
      };

      let authNames = ['HeaderApiKeyAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = MediaWithoutInternal;
      return this.apiClient.callApi(
        '/api/media', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Endpoint for media files upload
     * @param {File} file File to upload
     * @param {module:model/String} type Type of file image|file
     * @param {Object} opts Optional parameters
     * @param {Number} opts.save Should file be saved to database on upload: 0|1 (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MediaWithoutInternal}
     */
    postMedia(file, type, opts) {
      return this.postMediaWithHttpInfo(file, type, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
