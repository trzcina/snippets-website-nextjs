/**
 * Flotiq User API
 * ## Getting started   This is your Flotiq User API that allows you to access your data through the Content API that you defined.   ### Access to data   There are several methods that you can use to access your data:  * Live API docs - available via <code>Try it out</code> button available next to each endpoint   * Copying example code on the right side of each endpoint  * By downloading the SDKs available in mulitple languages.  * By downloading the Postman collection and importing it into Postman.    Each of these methods is described in length in the [user documentation](https://flotiq.com/docs/).   ### Authorization   In order to make use of the provided documentation, example code, SDKs and so on - you will need to pull out your API key. We recommend that you start with the ReadOnly API Key which will allow you to make all the `GET` requests but will error-out when you try to modify content. Please remember to replace the key for `POST`, `PUT` and `DELETE` calls.   It's also possible to use scoped API keys - you can create those in the API keys section of the Flotiq user interface. This will allow you to create a key that only authorizes access to a specific content type (or a set of content types, if you choose so). Read more about how to use and create API keys in the [API keys documentation](https://flotiq.com/docs/API/).   ## Object access   Once you define a Content Type it will become available in your Content API as a set of endpoints that will allow you to work with objects:   * create  * list  * update  * delete  * batch create  * retrieve single object.  ### Hydration   When you build Content Types that have relation to others your objects will optionally support hydration of related entities. The endpoints that support object retrieval accept a `hydrate` parameter, which can be used to easily fetch hydrated objects. Since this breaks the standard REST concepts - it's not enabled by default, but it's a very handy feature that allows to reduce the amount of HTTP requests sent over the wire and we strongly recommend to use it.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: hello@flotiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ContentTypeDefinitionSchema from '../model/ContentTypeDefinitionSchema';
import ContentTypeListResponse from '../model/ContentTypeListResponse';
import InlineResponse40010 from '../model/InlineResponse40010';
import InlineResponse4009 from '../model/InlineResponse4009';
import Model401Response from '../model/Model401Response';
import Model404Response from '../model/Model404Response';

/**
* Internal service.
* @module api/InternalApi
* @version 2.0.1
*/
export default class InternalApi {

    /**
    * Constructs a new InternalApi. 
    * @alias module:api/InternalApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Delete ContentTypeDefinition
     * @param {String} id Id of content type definition
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteContentDefinitionWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteContentDefinition");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/internal/contenttype/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete ContentTypeDefinition
     * @param {String} id Id of content type definition
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteContentDefinition(id) {
      return this.deleteContentDefinitionWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns an user-defined Content Definitions
     * @param {String} id Id of content type definition
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.resolveRef Should the system resolve references done using $ref (default to false)
     * @param {Boolean} opts.strictSchema Use 'schema' instead of 'schemaDefinition' (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContentTypeDefinitionSchema} and HTTP response
     */
    getContentDefinitionWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getContentDefinition");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'resolveRef': opts['resolveRef'],
        'strictSchema': opts['strictSchema']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContentTypeDefinitionSchema;
      return this.apiClient.callApi(
        '/api/v1/internal/contenttype/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns an user-defined Content Definitions
     * @param {String} id Id of content type definition
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.resolveRef Should the system resolve references done using $ref (default to false)
     * @param {Boolean} opts.strictSchema Use 'schema' instead of 'schemaDefinition' (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContentTypeDefinitionSchema}
     */
    getContentDefinition(id, opts) {
      return this.getContentDefinitionWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns an array of user-defined Content Definitions
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Listing page number, 1-based (default to 1)
     * @param {Number} opts.limit Page limit (default to 20)
     * @param {String} opts.orderBy Order by field (default to 'name')
     * @param {String} opts.orderDirection Order direction (default to 'asc')
     * @param {String} opts.name Filters CTDs by name (default to '')
     * @param {String} opts.label Filters CTDs by label (default to '')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContentTypeListResponse} and HTTP response
     */
    getContentDefinitionsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
        'order_by': opts['orderBy'],
        'order_direction': opts['orderDirection'],
        'name': opts['name'],
        'label': opts['label']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContentTypeListResponse;
      return this.apiClient.callApi(
        '/api/v1/internal/contenttype', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns an array of user-defined Content Definitions
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Listing page number, 1-based (default to 1)
     * @param {Number} opts.limit Page limit (default to 20)
     * @param {String} opts.orderBy Order by field (default to 'name')
     * @param {String} opts.orderDirection Order direction (default to 'asc')
     * @param {String} opts.name Filters CTDs by name (default to '')
     * @param {String} opts.label Filters CTDs by label (default to '')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContentTypeListResponse}
     */
    getContentDefinitions(opts) {
      return this.getContentDefinitionsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create new ContentTypeDefinition to store new type of ContentObjects
     * @param {Object} opts Optional parameters
     * @param {module:model/ContentTypeDefinitionSchema} opts.contentTypeDefinitionSchema 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContentTypeDefinitionSchema} and HTTP response
     */
    postContentDefinitionWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['contentTypeDefinitionSchema'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ContentTypeDefinitionSchema;
      return this.apiClient.callApi(
        '/api/v1/internal/contenttype', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create new ContentTypeDefinition to store new type of ContentObjects
     * @param {Object} opts Optional parameters
     * @param {module:model/ContentTypeDefinitionSchema} opts.contentTypeDefinitionSchema 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContentTypeDefinitionSchema}
     */
    postContentDefinition(opts) {
      return this.postContentDefinitionWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update ConentTypeDefinition
     * @param {String} id Id of content type definition
     * @param {Object} opts Optional parameters
     * @param {module:model/ContentTypeDefinitionSchema} opts.contentTypeDefinitionSchema 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContentTypeDefinitionSchema} and HTTP response
     */
    putContentDefinitionWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['contentTypeDefinitionSchema'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putContentDefinition");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ContentTypeDefinitionSchema;
      return this.apiClient.callApi(
        '/api/v1/internal/contenttype/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update ConentTypeDefinition
     * @param {String} id Id of content type definition
     * @param {Object} opts Optional parameters
     * @param {module:model/ContentTypeDefinitionSchema} opts.contentTypeDefinitionSchema 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContentTypeDefinitionSchema}
     */
    putContentDefinition(id, opts) {
      return this.putContentDefinitionWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
