/**
 * Flotiq User API
 * ## Getting started   This is your Flotiq User API that allows you to access your data through the Content API that you defined.   ### Access to data   There are several methods that you can use to access your data:  * Live API docs - available via <code>Try it out</code> button available next to each endpoint   * Copying example code on the right side of each endpoint  * By downloading the SDKs available in mulitple languages.  * By downloading the Postman collection and importing it into Postman.    Each of these methods is described in length in the [user documentation](https://flotiq.com/docs/).   ### Authorization   In order to make use of the provided documentation, example code, SDKs and so on - you will need to pull out your API key. We recommend that you start with the ReadOnly API Key which will allow you to make all the `GET` requests but will error-out when you try to modify content. Please remember to replace the key for `POST`, `PUT` and `DELETE` calls.   It's also possible to use scoped API keys - you can create those in the API keys section of the Flotiq user interface. This will allow you to create a key that only authorizes access to a specific content type (or a set of content types, if you choose so). Read more about how to use and create API keys in the [API keys documentation](https://flotiq.com/docs/API/).   ## Object access   Once you define a Content Type it will become available in your Content API as a set of endpoints that will allow you to work with objects:   * create  * list  * update  * delete  * batch create  * retrieve single object.  ### Hydration   When you build Content Types that have relation to others your objects will optionally support hydration of related entities. The endpoints that support object retrieval accept a `hydrate` parameter, which can be used to easily fetch hydrated objects. Since this breaks the standard REST concepts - it's not enabled by default, but it's a very handy feature that allows to reduce the amount of HTTP requests sent over the wire and we strongly recommend to use it.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: hello@flotiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineResponse40011 from '../model/InlineResponse40011';
import Model401Response from '../model/Model401Response';
import SearchResponse from '../model/SearchResponse';

/**
* SearchAPI service.
* @module api/SearchAPIApi
* @version 2.0.1
*/
export default class SearchAPIApi {

    /**
    * Constructs a new SearchAPIApi. 
    * @alias module:api/SearchAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * The Flotiq API provides a powerful search engine, which is a wrapper for ElasticSearch queries. We tried to balance between resembling the ES API (for those, who already know it) and keeping it simple and cohesive with Flotiq API. This endpoint provides means for querying content objects that match a set of criteria, with options for:   * limiting search to specific Content Types,  * limit search to specific fields,  * weighting fields to modify results scoring,  * aggregating results by fields.   You can find more information about the Search API in the [Search API docs](https://flotiq.com/docs/API/search/).
     * @param {Object} opts Optional parameters
     * @param {String} opts.q Query (default to '')
     * @param {Array.<String>} opts.fields Search only in selected fields.
     * @param {String} opts.page Listing page number, 1-based (default to '1')
     * @param {String} opts.limit Page limit (default to '20')
     * @param {String} opts.orderBy Order by field (default to '')
     * @param {String} opts.orderDirection Order direction (default to 'asc')
     * @param {Array.<String>} opts.contentType Restrict search to content types set
     * @param {Array.<String>} opts.aggregateBy Field to aggregate results direction (string fields only)
     * @param {Array.<String>} opts.aggregateByNumeric Field to aggregate results direction with numeric type
     * @param {Object.<String, Object>} opts.filters Filter by object properties. Expected format: filters[property1]=value1&filters[property2]=value2
     * @param {Object.<String, Object>} opts.postFilters Filter by object properties. Use it when you want aggregated counts without filters applied. Expected format: post_filters[property1]=value1&post_filters[property2]=value2
     * @param {Object.<String, Object>} opts.geoFilters Filter by object geolocation properties. Example value: geo_filters[location]=geo_distance,1.50km,40.1,-19.2 (filter name, distance, latitude, longitude). For more information see ElasticSearch docs. Only geo_distance query is supported.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SearchResponse} and HTTP response
     */
    searchWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': opts['q'],
        'fields[]': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'page': opts['page'],
        'limit': opts['limit'],
        'order_by': opts['orderBy'],
        'order_direction': opts['orderDirection'],
        'content_type[]': this.apiClient.buildCollectionParam(opts['contentType'], 'multi'),
        'aggregate_by[]': this.apiClient.buildCollectionParam(opts['aggregateBy'], 'multi'),
        'aggregate_by_numeric[]': this.apiClient.buildCollectionParam(opts['aggregateByNumeric'], 'multi'),
        'filters': opts['filters'],
        'post_filters': opts['postFilters'],
        'geo_filters': opts['geoFilters']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SearchResponse;
      return this.apiClient.callApi(
        '/api/v1/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * The Flotiq API provides a powerful search engine, which is a wrapper for ElasticSearch queries. We tried to balance between resembling the ES API (for those, who already know it) and keeping it simple and cohesive with Flotiq API. This endpoint provides means for querying content objects that match a set of criteria, with options for:   * limiting search to specific Content Types,  * limit search to specific fields,  * weighting fields to modify results scoring,  * aggregating results by fields.   You can find more information about the Search API in the [Search API docs](https://flotiq.com/docs/API/search/).
     * @param {Object} opts Optional parameters
     * @param {String} opts.q Query (default to '')
     * @param {Array.<String>} opts.fields Search only in selected fields.
     * @param {String} opts.page Listing page number, 1-based (default to '1')
     * @param {String} opts.limit Page limit (default to '20')
     * @param {String} opts.orderBy Order by field (default to '')
     * @param {String} opts.orderDirection Order direction (default to 'asc')
     * @param {Array.<String>} opts.contentType Restrict search to content types set
     * @param {Array.<String>} opts.aggregateBy Field to aggregate results direction (string fields only)
     * @param {Array.<String>} opts.aggregateByNumeric Field to aggregate results direction with numeric type
     * @param {Object.<String, Object>} opts.filters Filter by object properties. Expected format: filters[property1]=value1&filters[property2]=value2
     * @param {Object.<String, Object>} opts.postFilters Filter by object properties. Use it when you want aggregated counts without filters applied. Expected format: post_filters[property1]=value1&post_filters[property2]=value2
     * @param {Object.<String, Object>} opts.geoFilters Filter by object geolocation properties. Example value: geo_filters[location]=geo_distance,1.50km,40.1,-19.2 (filter name, distance, latitude, longitude). For more information see ElasticSearch docs. Only geo_distance query is supported.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SearchResponse}
     */
    search(opts) {
      return this.searchWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
