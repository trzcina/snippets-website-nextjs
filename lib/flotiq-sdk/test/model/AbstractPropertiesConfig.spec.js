/**
 * Flotiq User API
 * ## Getting started   This is your Flotiq User API that allows you to access your data through the Content API that you defined.   ### Access to data   There are several methods that you can use to access your data:  * Live API docs - available via <code>Try it out</code> button available next to each endpoint   * Copying example code on the right side of each endpoint  * By downloading the SDKs available in mulitple languages.  * By downloading the Postman collection and importing it into Postman.    Each of these methods is described in length in the [user documentation](https://flotiq.com/docs/).   ### Authorization   In order to make use of the provided documentation, example code, SDKs and so on - you will need to pull out your API key. We recommend that you start with the ReadOnly API Key which will allow you to make all the `GET` requests but will error-out when you try to modify content. Please remember to replace the key for `POST`, `PUT` and `DELETE` calls.   It's also possible to use scoped API keys - you can create those in the API keys section of the Flotiq user interface. This will allow you to create a key that only authorizes access to a specific content type (or a set of content types, if you choose so). Read more about how to use and create API keys in the [API keys documentation](https://flotiq.com/docs/API/).   ## Object access   Once you define a Content Type it will become available in your Content API as a set of endpoints that will allow you to work with objects:   * create  * list  * update  * delete  * batch create  * retrieve single object.  ### Hydration   When you build Content Types that have relation to others your objects will optionally support hydration of related entities. The endpoints that support object retrieval accept a `hydrate` parameter, which can be used to easily fetch hydrated objects. Since this breaks the standard REST concepts - it's not enabled by default, but it's a very handy feature that allows to reduce the amount of HTTP requests sent over the wire and we strongly recommend to use it.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: hello@flotiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FlotiqUserApi);
  }
}(this, function(expect, FlotiqUserApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FlotiqUserApi.AbstractPropertiesConfig();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AbstractPropertiesConfig', function() {
    it('should create an instance of AbstractPropertiesConfig', function() {
      // uncomment below and update the code to test AbstractPropertiesConfig
      //var instance = new FlotiqUserApi.AbstractPropertiesConfig();
      //expect(instance).to.be.a(FlotiqUserApi.AbstractPropertiesConfig);
    });

    it('should have the property label (base name: "label")', function() {
      // uncomment below and update the code to test the property label
      //var instance = new FlotiqUserApi.AbstractPropertiesConfig();
      //expect(instance).to.be();
    });

    it('should have the property inputType (base name: "inputType")', function() {
      // uncomment below and update the code to test the property inputType
      //var instance = new FlotiqUserApi.AbstractPropertiesConfig();
      //expect(instance).to.be();
    });

    it('should have the property unique (base name: "unique")', function() {
      // uncomment below and update the code to test the property unique
      //var instance = new FlotiqUserApi.AbstractPropertiesConfig();
      //expect(instance).to.be();
    });

    it('should have the property readonly (base name: "readonly")', function() {
      // uncomment below and update the code to test the property readonly
      //var instance = new FlotiqUserApi.AbstractPropertiesConfig();
      //expect(instance).to.be();
    });

    it('should have the property hidden (base name: "hidden")', function() {
      // uncomment below and update the code to test the property hidden
      //var instance = new FlotiqUserApi.AbstractPropertiesConfig();
      //expect(instance).to.be();
    });

    it('should have the property validation (base name: "validation")', function() {
      // uncomment below and update the code to test the property validation
      //var instance = new FlotiqUserApi.AbstractPropertiesConfig();
      //expect(instance).to.be();
    });

    it('should have the property options (base name: "options")', function() {
      // uncomment below and update the code to test the property options
      //var instance = new FlotiqUserApi.AbstractPropertiesConfig();
      //expect(instance).to.be();
    });

    it('should have the property helpText (base name: "helpText")', function() {
      // uncomment below and update the code to test the property helpText
      //var instance = new FlotiqUserApi.AbstractPropertiesConfig();
      //expect(instance).to.be();
    });

    it('should have the property isTitlePart (base name: "isTitlePart")', function() {
      // uncomment below and update the code to test the property isTitlePart
      //var instance = new FlotiqUserApi.AbstractPropertiesConfig();
      //expect(instance).to.be();
    });

    it('should have the property showTime (base name: "showTime")', function() {
      // uncomment below and update the code to test the property showTime
      //var instance = new FlotiqUserApi.AbstractPropertiesConfig();
      //expect(instance).to.be();
    });

    it('should have the property blockEditorTypes (base name: "blockEditorTypes")', function() {
      // uncomment below and update the code to test the property blockEditorTypes
      //var instance = new FlotiqUserApi.AbstractPropertiesConfig();
      //expect(instance).to.be();
    });

    it('should have the property items (base name: "items")', function() {
      // uncomment below and update the code to test the property items
      //var instance = new FlotiqUserApi.AbstractPropertiesConfig();
      //expect(instance).to.be();
    });

  });

}));
